#!/usr/bin/env python3
import os
import sys
from glob import glob
from datetime import datetime
import pickle
import numpy as np
from omop_core import BasicStreamer, BasicMemoryStreamer
from omop_embed import conf, dl, plp
#import study

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()

    parser.add_argument("-v", "--vocab_size", type=int, default=10000, help="expr")
    parser.add_argument("-t", "--test_split", default=0.1, type=float, help="test split")
    parser.add_argument("--seq_len", type=int, default=512, help="")
    parser.add_argument("--dim", type=int, default=512, help="")
    parser.add_argument("--heads", type=int, default=8, help="")
    parser.add_argument("--hidden", type=int, default=512, help="")
    parser.add_argument("--batch", type=int, default=64, help="")
    parser.add_argument("--epoch", type=int, default=10000, help="epoch size")
    parser.add_argument("--epochs", type=int, default=100, help="")
    parser.add_argument("--save", type=int, default=100, help="")
    parser.add_argument("--output", type=str, default='dl_model', help='')
    parser.add_argument("--black", type=str, default=None, help="black list")
    parser.add_argument("--net", type=str, default='pretrain', help="")
    parser.add_argument("--gpu", dest='gpu', action='store_true', help='')
    parser.add_argument("--learning_rate", type=float, default=0.001, help="")
    parser.add_argument("--weight_decay", type=float, default=0.001, help="")
    parser.add_argument("--drop_rate", type=float, default=0.0, help="")
    parser.add_argument("--freeze", type=int, default=0, help="")
    parser.add_argument("--tune", type=float, default=None, help="")
    parser.add_argument("--no_control_pool", dest='no_control_pool', action='store_true', help='')
    parser.add_argument("--no_early_stop", dest='no_early_stop', action='store_true', help='')

    args = parser.parse_args()

    partitions = glob(f'{conf.DATA_DIR}/partitions/*')
    if args.test_split >= 1:
        n_test = int(args.test_split)
        assert n_test == args.test_split
    else:
        n_test = round(len(partitions) * args.test_split)
    n_train = len(partitions) - n_test
    assert n_train > 0, 'number of training partition(s) must be > 0'
    assert n_test > 0, 'number of test partition(s) must be > 0'
    train_conf = {'paths': partitions[:n_train],
                  'shuffle': True,
                  'loop': True,
                  'inference': False,
                  'drop_rate': args.drop_rate,
                  'epoch_size': args.epoch,
                  'no_control_pool': args.no_control_pool}

    test_conf = {'paths': partitions[n_train:],
                 'shuffle': False,
                 'inference': True,
                 'loop': False
                 }

    conf = {
        'batch_size': args.batch,
        'seq_len': args.seq_len,
        'min_tokens': 0,
        'pretrain': True,
        'local': False,
        'vocab': f'{conf.DATA_DIR}/dict',
        'vocab_size': args.vocab_size,
    }
    #
    outdir = '%s/%s' % (args.output, datetime.now().strftime("%Y%m%d-%H%M%S"))
    os.makedirs(outdir, exist_ok=True)

    if args.black is None:
        black = os.path.join(outdir, 'black')
        print("Generating black list")
        if plp.generate_blacklist(black):
            conf['black_list'] = black
        else:
            print("No existing experiments are found. Not setting black list.")
    else:
        conf['black_list'] = args.black

    with open(os.path.join(outdir, 'conf.pkl'), 'wb') as f:
        pickle.dump(conf, f)

    train_conf.update(conf)
    test_conf.update(conf)

    print("Loading Train Dataset")
    if args.epoch is None:
        assert False, "Must specify training epoch size."
        #train_data_loader = Wrapper(omop.BasicSmallStreamer(train_conf))
    else:
        train_stream = BasicStreamer(train_conf)
    print("Loading Test Dataset")
    if args.test_split == 0:
        val_stream = None
    else:
        val_stream = BasicMemoryStreamer(test_conf)
    dl.train(train_stream, val_stream, args)


'''
Copyright Â© 2022 Merck & Co., Inc., Rahway, NJ, USA and its affiliates. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
'''
